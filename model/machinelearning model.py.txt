#build a model
import seaborn as sns
import pandas as pd
df
df.shape
import numpy as np

X = df.drop(columns=['property-type']).to_numpy()
y =Price= df.Price.to_numpy().reshape(-1 , 1)
print("X shape : ", X.shape)
print("y shape : ", y.shape)
#ax.scatter(df['Number_of_Rooms'],df['Price'])

fig, axes = plt.subplots(nrows=1, ncols=1)
plt.tight_layout()


axes.scatter(df['Number_of_Rooms'],df['Price'])
plt.show()
df.corr()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

print("Shape of X_train: ", X_train.shape)
print("Shape of X_test: ", X_test.shape)
print("Shape of y_train: ", y_train.shape)
print("Shape of y_test: ", y_test.shape)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,y_train)
The_accuracy_of_the_train=print('The accuracy of the train',regressor.score(X_train, y_train)*100)
TheAccuracyofthetest=print('The Accuracy of thetest',regressor.score(X_test, y_test)*100)
#print(regressor.score(X_test,X_train)*100)
#print(regressor.score(y_test,y_train)*100)
y_pred=regressor.predict(X_test)
print(y_pred)
print('coefficient',regressor.coef_)

from sklearn.metrics import mean_squared_error
print('mean_squared_error',mean_squared_error(y_test, y_pred, squared=False))
sns.displot(df['Price'],kde=False)
sns.displot(df['Number_of_Rooms'],kde=False)
sns.displot(df['property-type'],kde=False)
import seaborn as sb
sns.boxplot(df['Price'],df['Number_of_Rooms'])